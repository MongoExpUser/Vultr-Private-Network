name: CI - PVN-On-AWS

on:
  push:
    branches:
    - main
  pull_request:
   # matches pull request for all branches and tag names

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    env:
      DEV: 'yes'
      PROD: 'no'
      PLAN: 'yes'
      APPLY: 'no'
      DESTROY: 'no'
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      VULTR_API_KEY: ${{ secrets.VULTR_API_KEY }}
    defaults:
      run:
        shell: bash
 
    steps:
    - name: GitHub Actions Runner Set-up
      uses: actions/checkout@v2
      
    - name: Terraform Repo Security Scan Set-up
      uses: triat/terraform-security-scan@v3
      
    - name: Terraform CLI Set-up
      uses: hashicorp/setup-terraform@v1
      
    - name: Terraform Init
      run: terraform init
      
    - name: Terraform Validate
      run: terraform validate
      
    - name: Terraform Variables - Dev
      if: ${{ env.DEV == 'yes' }}
      run: |-
        cat dev.auto.tfvars <<EOF
        EOF
        
    - name: Terraform Variables - Prod
      if: ${{ env.PROD == 'yes' }}
      run: |-
        cat prod.auto.tfvars <<EOF
        EOF
    
    - name: Terraform Plan
      if:  (env.PLAN == 'yes') && ( env.DEV == 'yes' || env.PROD == 'yes' )
      run: terraform plan
      
    - name: Terraform Apply Dev
      if: github.ref == 'refs/heads/master' && github.event_name == 'push' && env.APPLY == 'yes' && env.DEV == 'yes'
      run: terraform apply -var-file=dev.auto.tfvars -auto-approve
    
    - name: Terraform Apply Prod
      if: github.ref == 'refs/heads/master' && github.event_name == 'push' && env.APPLY == 'yes' && env.PROD == 'yes'
      run: terraform apply -var-file=prod.auto.tfvars -auto-approve
  
    - name: Terraform Destroy
      if: ${{ env.DESTROY == 'yes' }}
      run: terraform destroy -auto-approve
